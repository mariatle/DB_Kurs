# Generated by Django 5.1.7 on 2025‑05‑06 07:05
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


# ────────────────────────────────
#  Удаляем дубликаты Alarm (analysis_id, alarm_level)
# ────────────────────────────────
def deduplicate_alarms(apps, schema_editor):
    Alarm = apps.get_model("monitoring", "Alarm")
    from django.db import models

    dupes = (
        Alarm.objects
        .values("analysis_id", "alarm_level")
        .annotate(cnt=models.Count("id"))
        .filter(cnt__gt=1)
    )
    for row in dupes:
        qs = (
            Alarm.objects
            .filter(
                analysis_id=row["analysis_id"],
                alarm_level=row["alarm_level"],
            )
            .order_by("id")
        )
        keep_id = qs.first().id       # самый ранний оставляем
        drop_ids = qs.values_list("id", flat=True).exclude(id=keep_id)
        if drop_ids:
            Alarm.objects.filter(id__in=list(drop_ids)).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("monitoring", "0012_environmentalparameters_processed"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        # ---- существующие Alter* / AddIndex / т.д.  ----
        migrations.AlterModelOptions(
            name="alarm",
            options={"ordering": ["-alarm_at"]},
        ),
        migrations.AlterModelOptions(
            name="analyzedinformation",
            options={
                "ordering": ["-analyzed_at"],
                "verbose_name_plural": "Analyzed information",
            },
        ),
        migrations.AlterModelOptions(
            name="incident",
            options={"ordering": ["-detected_at"]},
        ),
        migrations.AlterModelOptions(
            name="incidentstatushistory",
            options={"ordering": ["-changed_at"]},
        ),
        # --- AlterField блоки (как в вашем оригинале, опустил для краткости) ---
        # --- AddIndex блоки ---
        migrations.AddIndex(
            model_name="environmentalparameters",
            index=models.Index(
                fields=["device", "recorded_at"],
                name="environment_device__354516_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="environmentalparameters",
            index=models.Index(
                fields=["recorded_at"], name="environment_recorde_3f221b_idx"
            ),
        ),
        # ── Новый шаг: убираем дубликаты ──
        migrations.RunPython(deduplicate_alarms, migrations.RunPython.noop),
        # ── Затем добавляем уникальное ограничение ──
        migrations.AddConstraint(
            model_name="alarm",
            constraint=models.UniqueConstraint(
                fields=("analysis", "alarm_level"), name="uniq_alarm_analysis_level"
            ),
        ),
        # ── Check‑constraints ENV ──
        migrations.AddConstraint(
            model_name="environmentalparameters",
            constraint=models.CheckConstraint(
                condition=models.Q(("temperature__gte", -50), ("temperature__lte", 200)),
                name="chk_env_temp",
            ),
        ),
        migrations.AddConstraint(
            model_name="environmentalparameters",
            constraint=models.CheckConstraint(
                condition=models.Q(("humidity__gte", 0), ("humidity__lte", 100)),
                name="chk_env_humidity",
            ),
        ),
        migrations.AddConstraint(
            model_name="environmentalparameters",
            constraint=models.CheckConstraint(
                condition=models.Q(("co2_level__gte", 0)), name="chk_env_co2"
            ),
        ),
    ]